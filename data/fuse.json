{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root-Dendron-Template","n":1},"1":{"v":"## Project\n\n- [Project Repository](https://github.com/Mjvolk3/Dendron-Template)\n","n":0.5}}},{"i":2,"$":{"0":{"v":"Python","n":1}}},{"i":3,"$":{"0":{"v":"Docs","n":1}}},{"i":4,"$":{"0":{"v":"Sphinx","n":1},"1":{"v":"## Generating Sphinx Docs for Python\n\nStep-by-step guide:\n\n1. **Install Sphinx**: Install Sphinx in your Python environment using pip.\n\n    ```shell\n    pip install sphinx\n    ```\n\n2. **Initialize the docs directory**: Run `sphinx-quickstart` in your project directory to generate the base files for the documentation.\n\n    ```shell\n    mkdir docs\n    cd docs\n    sphinx-quickstart\n    ```\n\n    When prompted, you can press enter to accept the default values for most options. Make sure to say yes (`y`) to the \"autodoc\" extension, which is used to generate documentation from docstrings.\n\n3. **Configure Sphinx**: In the `conf.py` file generated by `sphinx-quickstart`, add the path to your project to the system path.\n\n    ```python\n    import os\n    import sys\n    sys.path.insert(0, os.path.abspath('../src'))\n    ```\n\n    Also, add `'sphinx.ext.autodoc'` to the list of extensions.\n\n4. **Install and Configure the MyST parser**: If you want to use Markdown for some or all of your documentation, you'll need to install the MyST parser and add it to your list of extensions:\n\n    ```shell\n    pip install myst-parser\n    ```\n\n    Then add it to the `extensions` list in `conf.py`:\n\n    ```python\n    extensions = [\n        'sphinx.ext.autodoc',\n        'myst_parser',\n    ]\n    ```\n\n5. **Write reStructuredText and Markdown files**: Create `.rst` and/or `.md` files for each of your modules to tell Sphinx what to document. These files should be in the same directory as your `conf.py` file. For a module named `my_module`, the contents of `my_module.rst` could be:\n\n    ```rst\n    my_package.my_module module\n    ==========================\n\n    .. automodule:: my_package.my_module\n       :members:\n    ```\n\n    Update the `index.rst` file to include your module in the table of contents tree (`toctree`).\n\n    To link to other documentation files, use the `:doc:` role in reStructuredText files and standard Markdown links in Markdown files.\n\n6. **Install and configure a theme**: To use the \"Read the Docs\" theme, first install it with pip:\n\n    ```shell\n    pip install sphinx_rtd_theme\n    ```\n\n    Then, add it to the list of extensions and set it as the theme in `conf.py`:\n\n    ```python\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinx_rtd_theme',\n        'myst_parser',  # if you're using Markdown\n    ]\n    html_theme = 'sphinx_rtd_theme'\n    ```\n\n7. **Generate the HTML documentation**: Now you can generate the HTML documentation with the `make html` command.\n\n    ```shell\n    make html\n    ```\n\n    If everything is set up correctly, Sphinx should generate the documentation in the `_build/html` directory. Open the `index.html` file in a web browser to view your documentation.\n\nRemember that every time you update your code or `.rst`/`.md` files, you should re-run `make html` to update the HTML documentation.\n\n## Additional Notes and Gotchas\n\n- Standard practice is to keep docs outside of `src`.\n- You must cd to docs dir to make html `cd docs` then `make html`. `make docs/html` does not work.\n- You can use the VsCode Extension live server on the `index.rst` to preview the docs.\n","n":0.048}}},{"i":5,"$":{"0":{"v":"chatGPT","n":1}}},{"i":6,"$":{"0":{"v":"conversation","n":1}}},{"i":7,"$":{"0":{"v":"conda-env-yaml-output","n":1},"1":{"v":"- This conversation was converted to markdown with [[command|chatGPT.commands]].\n\n## Conversation\n\n**You**: how to export a conda environment with\n\n- `conda env export --no-builds | grep -v \"prefix\" &gt; env/my-env.yml`\nbut ignore the pip installed package.\n- my-package==1.0.0\n\n**ChatGPT**: To export a Conda environment but ignore a specific package installed via pip, you can use the ```--ignore-pip``` flag with the ```conda env export``` command. Here's an example command:bash\n\n```bash\nconda env export --no-builds --ignore-pip | grep -v \"prefix\" | grep -v \"my-package==1.0.0\" &gt; env/my-env.yml\n```\n\nThis command exports the environment without including pip-installed packages and then removes the line containing the package ```my-package==1.0.0```. The resulting ```my-env.yml``` file will not include the specified package.\n\n**You**: I want to use the grep command to remove `my-package==` but the version number can be arbitrary.\n\n**ChatGPT**: To remove the package ```my-package``` with an arbitrary version number from the ```conda env export``` output using ```grep```, you can use a regular expression to match the package name and version number.\n\nHere's an example command that uses ```grep``` with a regular expression to remove the line containing ```my-package``` and its version number from the output:bash\n\n```bash\nconda env export --no-builds | grep -v \"my-package=[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\" | grep -v \"prefix\" &gt; env/my-env.yml\n```\n\nThe regular expression ```[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+``` matches a version number with three numeric components separated by periods, e.g., ```1.2.3```. The ```+``` symbol after each ```[0-9]``` matches one or more consecutive digits.\n\nThe first ```grep``` command removes the line containing ```my-package``` and its version number from the output, and the second ```grep``` command removes the line containing the ```prefix``` information. The resulting ```my-env.yml``` file will not include the specified package and its version number.\n\n**You**: Each numeric component can be two numbers. Something like `11.23.99`. can you update the regex from the last command to account for this. Also I don't want to ignore all pip packages.\n\n**ChatGPT**: Sure, to match version numbers with two-digit components, you can modify the regular expression to allow for one or two digits in each component, like this:bash\n\n```bash\nconda env export --no-builds | grep -v \"my-package=[0-9]\\+\\.[0-9]\\{1,2\\}\\.[0-9]\\{1,2\\}\" | grep -v \"prefix\" &gt; env/my-env.yml\n```\n\nIn this regular expression, ```{1,2}``` after the second and third ```[0-9]``` specifies that each numeric component can have one or two digits.\n\nRegarding ignoring only specific pip packages, you can add the ```--ignore-pkg``` flag to the ```conda env export``` command followed by the name of the package(s) you want to ignore. For example:perl\n\n```perl\nconda env export --no-builds --ignore-pkg my-package | grep -v \"prefix\" &gt; env/my-env.yml\n```\n\nThis command will ignore the ```my-package``` package installed via pip, while still including other pip packages in the exported environment.\n\n**You**: conda env export doesn't have a --ignore-pkg command...\n\n**ChatGPT**: I apologize for the confusion. You are correct that ```conda env export``` does not have an ```--ignore-pkg``` option.\n\nInstead, you can use the ```pip freeze``` command to generate a list of pip-installed packages in your conda environment and then filter out the package(s) you don't want to include in the exported environment. Here's an example command that exports a Conda environment, excludes a specific pip package (e.g., ```my-package```), and saves the output to a YAML file:bash\n\n```bash\nconda env export --no-builds | grep -v \"prefix\" | grep -v \"$(pip freeze | grep 'my-package==')\" &gt; env/my-env.yml\n```\n\nIn this command, the ```pip freeze``` command generates a list of all pip-installed packages in the environment, and the ```grep``` command filters out any lines containing ```my-package==```. The resulting output is then saved to the ```my-env.yml``` file.\n\nIf you want to exclude multiple pip packages, you can add additional ```grep -v``` commands for each package, separated by ```|``` (pipe) characters. For example:bash\n\n```bash\nconda env export --no-builds | grep -v \"prefix\" | grep -v \"$(pip freeze | grep 'my-package==')\\|$(pip freeze | grep 'another-package==')\" &gt; env/my-env.yml\n```\n\nThis command excludes both ```my-package``` and ```another-package``` from the exported environment.\n","n":0.041}}},{"i":8,"$":{"0":{"v":"Workspace","n":1}}},{"i":9,"$":{"0":{"v":"Tutorial","n":1},"1":{"v":"## Dendron Important Files\n\n- [[dendron.yml]] - Customization of Dendron behavior.\n- [[dendron.code-workspace]] - Essentially VsCode workspace settings. Includes task, debugger settings, etc.\n  - For some reason going to file on `code-workspace` doesn't work, but you can `alt+click` to open. This is the only file I now of that won't open with the wiki link.\n- [[dendronrc.yml]] - Allows you arbitrarily link to notes from other workspaces.\n- Check [[Extensions|vscode.extensions]] to get an idea of extensions used.\n\n## Dendron Cli\n\n- 🚨 **NOT WORKING**\n  - I need to rewrite some of the bash scripts, once these are written, [latex-writing-environment](#latex-writing-environment)\n  will make more sense.\n    - This is an example of linking within a note\n    - Note that regular markdown linking should be used for linking within document. `command palette` → `Trigger Suggest` is useful for this.\n\n- This step is necessary for stitching together [[Paper|Paper]].\n  - [Dendron Reference](https://wiki.dendron.so/notes/FnK2ws6w1uaS1YzBUY3BR/).\n\n- Initialize a npm repo at the root of your workspace (where dendron.yml is located)\n  - `npm init -y`\n- Install dendron-cli\n  - `npm install @dendronhq/dendron-cli@latest`\n\n## Markdown Linting\n\n- [Markdown Lint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) is used to try and keep some consistency within the markdown notes. This pays off big when converting between markdown, pdf, etc. Some of it's setting show up in the [[dendron.code-workspace]].\n\n```json\n\"markdownlint.config\":{\n            \"MD007\": { \"indent\": 2 },\n            \"MD008\": false,\n            \"MD013\": false,\n            \"MD014\": false,\n            \"MD018\": false,\n            \"MD025\": false,\n            \"MD026\": false,\n            \"MD033\": false,\n            \"MD045\": false,\n            \"MD050\": false,\n        },\n```\n\n- These codes can be hovered over or searched to find their specification. For example `\"MD007\"` specifies the unordered list indentation.\n- It is preferred to keep formatting up to snuff, by formatting on save. The following setting is used to format on save.\n\n```json\n\"editor.codeActionsOnSave\": {\n      \"source.fixAll.markdownlint\": true,\n   },\n\n```\n\n- To test  linting is working edit the [[README.md]] like so, see the red squiggles, and save the document to see the reformatting.\n\n- Before\n\n![](./assets/images/markdown-linting-example.png)\n\n- After\n\n![](./assets/images/markdown-linting-example-solution.png)\n\n## Python Package\n\n- This repo is setup for some basic python development. The preferred way to develop is to write an editable package with the intention of eventually publishing to [PyPI](https://pypi.org/project/bumpver/#example-usage).\n\n### Run `__main__.py` from Debugger\n\n- Activate conda environment and make sure that the proper environment is selected for the workspace with [Python Environment Manager](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-environment-manager) extension.\n- Change [[pyproject.toml]] accordingly.\n  - It is currently filled with some minimal information. It can be modified as necessary.\n- `python -m pip install -e .`\n- Open [[src/my_package/__main__.py]].\n- `Command Palette` → `Debug: Start Debugging`.\n  - Launch settings can be found [[dendron.code-workspace]].\n  - You can note that from the published version, the above link is marked as private. This is because the html is referencing an unknown files directory. To overcome this for publishing the url link can be used instead. [src/my_package/__main__.py](https://github.com/Mjvolk3/Dendron-Template/blob/main/src/my_package/__main__.py)\n\n### Error Python Package\n\n- You will get this error if you haven't used [Python Environment Manager](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-environment-manager) extension or you have `python -m pip install -e .`.\n\n```python\nException has occurred: ModuleNotFoundError\nNo module named 'my_package'\n  File \"/Users/michaelvolk/Documents/projects/Dendron-Template/src/my_package/__main__.py\", line 1, in <module>\n    from my_package import first_module\nModuleNotFoundError: No module named 'my_package'\n```\n\n## VsCode Tasks\n\n- Interactive Tasks: `nano Interactive` and `nano qsub main`.\n  - These are intended to show the interactive options of tasks. But they will run as they are. The two examples were used for working with the [Nano Cluster](https://wiki.ncsa.illinois.edu/display/ISL20/Nano+cluster).\n- `Pandoc: quick-pdf` does a quick print of a Dendron note. We will walk through its usage.\n\n### Pandoc: quick-pdf\n\n- Install [Pandoc](https://pandoc.org/installing.html), the swiss army knife 🇨🇭🪖🔪 document conversion.\n  - Pandoc is how [[Paper|Paper]] in ultimately written to a pdf, docx, latex, etc.\n- Open note [[Extensions|vscode.extensions]], and run `Pandoc: quick-pdf`.\n  - This command works by referencing the current focused file.\n- A terminal output will open.\n\n```bash\n Executing task in folder Dendron-Template: cd ./notes && pandoc -F mermaid-filter -s /Users/michaelvolk/Documents/projects/Dendron-Template/notes/vscode.extensions.md -o /Users/michaelvolk/Documents/projects/Dendron-Template/notes/assets/pdf-output/vscode.extensions.pdf --pdf-engine=xelatex -V geometry:'top=2cm, bottom=1.5cm, left=2cm, right=2cm' --strip-comments  && cd ..\n```\n\n- To open the pdf, you can hover over the [[notes/assets/pdf-output/vscode.extensions.pdf]], hold alt and click. You can also navigate to the path to open the file.\n- Try to delete this the pdf file and rerun the task, to prove that it works.\n\n## Latex Writing Environment\n\n- Often the Markdown → PDF (via Pandoc) can't get us all of the formatting we need. Markdown → Docx (via Pandoc), or Markdown → latex (via Pandoc) can take us home to the promise land 🌄.\n- To illustrate the potential of the latex approach delete  `notes/assets/latex-paper/scribe_template` and unzip [[notes/assets/latex-paper/scribe_template.zip]].\n- Go to [[notes/assets/latex-paper/scribe_template/scribe-template.tex]] and run `Command Palette` →  `LaTeX Workshop: Build LaTeX project`. This will produce [[notes/assets/latex-paper/scribe_template/scribe-template.pdf]].\n\n### Potential of Combining Dendron Notes to Latex Paper\n\n- Notes can converted to individual latex documents based on some tex template.\n  - 🚨 I haven't done this.\n\n```bash\npandoc input.md -o output.tex -s --template=mytemplate.tex\n```\n\n- This can be done in one shot [[Paper|Paper]] to `paper.tex`, or it can be done piecewise by using the import capabilities within latex. For example we could do [[Introduction|paper.Introduction]] to `sections/introduction.tex`, which would then be stitched together in `main.tex`. Below I show a sample hierarchy from a previous overleaf project.\n\n![](/assets/images/latex-hierarchical.png)\n\n- Naysayer 😈: \"Pointless! Why not just write all notes in Latex? This is redundant.\"\n- Evangelist 😇:  \"Notes in Dendron allows for searchability, hierarchical notes, and linking of disparate ideas. It's the power of connection! Latex is about the final product 💎.\"\n\n- If we really wanted we could even write a task, say `paper to latex paper`, that will write all of the necessary latex files for building `main.tex` from Dendron markdown notes. This task would just call a bash script or python script that does this conversion, calling necessary pandoc tools, etc.\n\n## Jupyter Notebooks\n\n- Development in Jupyter Notebooks is discouraged, but it is encouraged to use jupyter for demonstrations, instruction, reports, etc.\n- An example of this usage is given here [[notebooks/using-my-package.ipynb]].\n- I printed this notebook to a pdf [[notebooks/using-my-package.pdf]] on the notebook page under the triple dot options.\n  - This options uses the [Quarto](https://quarto.org/docs/tools/vscode.html) extension by default if installed.\n- You can also export to html within Jupyter, see [[notebooks/using-my-package.html]].\n\n## Reproducible Python Environments\n\n- For reproducible python environments, we write the requirements to a `env.yml`. It is worth seeing that the following commands can reproduce the environment.\n\n### Exporting Environment YAML\n\n```bash\nconda env export --no-builds | grep -v \"prefix\" | grep -v \"$(pip freeze | grep 'my-package==')\\|$(pip freeze | grep 'another-package==')\" > env/env-dendron-template.yml\n```\n\n- I cannot take credit for the command line wizardry 🧙🏼‍♂️ [[Conversation|chatGPT.conversation.conda-env-yaml-output#conversation]].\n\n### Conda Create from YAML and Install Package\n\n```bash\nconda env create -f env/env-dendron-template.yml python=3.11\nconda activate env-dendron-template\npython -m pip install -e .\n```\n\n## Drawio\n\n- Not necessary but another element I like about taking notes with Dendron is using the [Draw.io](https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio) extension. This allows making quick graphics that can be updated at any time.\n\n### Drawio Demonstrations\n\n- To make a draw.io image `command palette` → `Draw.io: New Draw.io Diagram`.\n- Make a drawing and save the file.\n- Within the draw.io gui go to file → convert → png or svg.\n- Import the image as you would import any other image. See below.\n- If the image is too small once imported into a note you can adjust the size by changing the zoom property. Go to the draw.io gui go to file → properties → zoom.\n\n![](/assets/drawio/Dendron_Template_Example.drawio.png)\n\n- This draw.io graphic shows how the [[dendronrc.yml]] is used, and how the workspace is intended to be used in a modular fashion. The important part of this linking is that each workspace is standalone. If an of the links are severed by removing the workspace from the [[dendronrc.yml]], links and note references will go dead, but this should not cause any other part of the workspace to break. The links can be restored by adding the workspace back to [[dendronrc.yml]], and links are traceable if `enableXVaultWikiLink: true` in [[dendron.yml]] . This is the default.\n\n![](/assets/drawio/Drawio-fancy-features.drawio.png)\n\n- This is an example of how draw.io using latex equations. There is another feature that I haven't found terribly useful, but it is interesting. You can link draw.io objects to individual code files. This can be done by selecting a draw.io object, opening a code file, and funning `Draw.io: Toggle Code Link Activation`. Then if you open the draw.io image, you can double click that object and it should open the file. This could be useful for charting out different modules and planing. Draw.io also allows for input of data, so graphs can be constructed by data import. There is some interesting ideas here around visualizing code dependencies, note linkages of subgraphs within Dendron, etc.\n\n- Most figures in this [project](https://mjvolk3.github.io/MATH-490-Project/) are made with Draw.io.\n\n## Python Docs\n\n- Documentation could be written with Dendron, but there are already tools that have a lot of nice features for documenting a python library. I've elected to use Sphinx for documentation. A [[Sphinx Step-by-Step Guide|python.docs.sphinx]] will help with python documentation.\n\n## Python Testing\n\n- I have setup this project to use `pytest` for all python projec testing. Test files sit in `tests/test_*.py` and test the functionality of the library in `src`\n","n":0.026}}},{"i":10,"$":{"0":{"v":"Vscode","n":1}}},{"i":11,"$":{"0":{"v":"Extensions","n":1},"1":{"v":"## List of Extensions\n\n- This is not a reliable source of documentation for up to date extensions, but should give a rough idea for reproducing the VsCode environment.\n\n```bash\n$ code --list-extensions\n\nalbymor.increment-selection\nbungcip.better-toml\nchristian-kohler.path-intellisense\ndarkriszty.markdown-table-prettify\nDavidAnson.vscode-markdownlint\ndendron.dendron\ndendron.dendron-markdown-shortcuts\ndendron.dendron-paste-image\ndonjayamanne.python-environment-manager\ndzhavat.git-cheatsheet\neamodio.gitlens\nEarthSlurm.stql\nExecutableBookProject.myst-highlight\nformulahendry.code-runner\nfoxundermoon.shell-format\ngencay.vscode-chatgpt\nGitHub.copilot\nGitHub.vscode-pull-request-github\nGrapeCity.gc-excelviewer\nGruntfuggly.todo-tree\nhediet.debug-visualizer\nhediet.vscode-drawio\nJames-Yu.latex-workshop\njasew.anki\nKevinRose.vsc-python-indent\nmarclipovsky.string-manipulation\nmarp-team.marp-vscode\nmathematic.vscode-latex\nmathpix.vscode-mathpix-markdown\nmblode.zotero\nmhutchie.git-graph\nms-azuretools.vscode-docker\nms-python.black-formatter\nms-python.isort\nms-python.python\nms-python.vscode-pylance\nms-toolsai.jupyter\nms-toolsai.jupyter-keymap\nms-toolsai.jupyter-renderers\nms-toolsai.vscode-jupyter-cell-tags\nms-toolsai.vscode-jupyter-slideshow\nms-vscode-remote.remote-ssh\nms-vscode-remote.remote-ssh-edit\nms-vscode-remote.vscode-remote-extensionpack\nms-vscode.azure-account\nms-vscode.remote-explorer\nms-vscode.remote-server\nms-vscode.wordcount\nms-vsliveshare.vsliveshare\nnjpwerner.autodocstring\nquarto.quarto\nrebornix.toggle\nredhat.vscode-yaml\nRemisa.mathover\nryuta46.multi-command\nshardulm94.trailing-spaces\nshd101wyy.markdown-preview-enhanced\nsleistner.vscode-fileutils\nstreetsidesoftware.code-spell-checker\ntecher.open-in-browser\nVisualStudioExptTeam.intellicode-api-usage-examples\nVisualStudioExptTeam.vscodeintellicode\nvscode-icons-team.vscode-icons\nxiaoluoboding.vscode-folder-size\nyy0931.mplstyle\nyzhang.markdown-all-in-one\nZainChen.json\n```\n","n":0.183}}},{"i":12,"$":{"0":{"v":"User","n":1}}},{"i":13,"$":{"0":{"v":"Mjvolk3","n":1}}},{"i":14,"$":{"0":{"v":"tasks","n":1},"1":{"v":"[[Future|user.Mjvolk3.tasks.future#future]]\n\n## 2023.02.07\n\n- A task\n","n":0.5}}},{"i":15,"$":{"0":{"v":"future","n":1},"1":{"v":"## Future\n\n- A task\n\n## Far Future\n\n- A task\n","n":0.354}}},{"i":16,"$":{"0":{"v":"Publish","n":1},"1":{"v":"## Paper Export\n\n- [paper.docx](./notes/export/paper.docx)\n- [paper.pdf](./notes/export/paper.pdf)\n\n## To Compile Document\n\n- Run `compile_paper.sh`\n  - This currently is slightly broken  due to `./` prepend path issue with pandoc[Pod V2 export asset paths](https://github.com/dendronhq/dendron/issues/3460)\n  - **Key** as long as all paths of note assets have `./` prepended the output should be proper.\n\n## Export Markdown Pod\n\n- Configure markdown pod through command palette\n- Export pod to folder pod_export\n\n## Pandoc\n\nFrom root directory run:\n\n```bash\npandoc -f gfm --toc -s pod_export/Dendron-Template/Paper.md -o paper.docx --reference-doc=reference.docx\n```\n\n- `-f` format GitHub ... something style?\n- `--toc` - table of contents\n- `-s` - standalone\n- `-o` - output\n- `--reference-doc` - reference for word formatting. Change this docs formatting to change the export formatting.\n- **Note**: Can also use this to export to word\n\n## Resources\n\n- [config.export info](https://wiki.dendron.so/notes/Un0n1ql7LfvMtmA9JEi4n/)\n","n":0.093}}},{"i":17,"$":{"0":{"v":"Word","n":1},"1":{"v":"## Merge Tools\n\n- Docx merge tools are limited as it looks difficult to merge the xml.\n\n### Linux\n\n- [Linux option](https://github.com/Ventto/odocxmerge)\n  - This is specific to linux\n  - Only works on linux. Requires `resgen`.\n    - Attempted download on MacOS: `resgen: command not found`\n\n### MacOS\n\n- It seems this must be done manually...\n- [youtube tutorial](https://www.youtube.com/watch?v=3FYzP_kWq24)\n  - This works well enough\n  - My use case is only for cover page and the rest of the body\n\n### Windows\n\n- [Windows Option](https://github.com/jamessantiago/DocxMerge)\n- Looks simple enough but there are known issues like the ordering of the documents. But it should be navigable. See [issue](https://github.com/jamessantiago/DocxMerge/issues/2).\n\n### Issues\n\n- TOC out of order [stackoverflow](https://stackoverflow.com/questions/25591517/pandoc-inserting-pages-before-generated-table-of-contents)\n","n":0.1}}},{"i":18,"$":{"0":{"v":"Pdf","n":1},"1":{"v":"\n## Merge Tools\n\n- [PDF Merge Tools](https://sites.astro.caltech.edu/observatories/coo/solicit/mergePDF.html#:~:text=ghostscript%20is%20commonly%2Ftypically%20foun\n\n### Linux and MacOS\n\n- Ghostscript (`gs`) is often natively installed\n\n```bash\ngs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=combined.pdf -dBATCH pdf1.pdf pdf2.pdf pdf3.pdf ...\n```\n\n### Windows\n\n- Have not tested but it looks relatively easy to use.\n- [pdftk download](https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/)\n- [pdftk examples](https://www.pdflabs.com/docs/pdftk-cli-examples/)\n- `pdftk in1.pdf in2.pdf cat output out1.pdf`\n","n":0.151}}},{"i":19,"$":{"0":{"v":"Outline","n":1}}},{"i":20,"$":{"0":{"v":"01","n":1},"1":{"v":"\n## Abstract\n\n## Introduction\n\n## Results/Discussion\n\n### Part 1\n\n### Part 2\n\n### Part 3\n\n### Part 4\n\n### Part 5\n\n### Part 6\n\n## Conclusion\n\n## Methods\n\n## Writing\n","n":0.229}}},{"i":21,"$":{"0":{"v":"Paper","n":1},"1":{"v":"\n## Abstract\n\n![[paper.Abstract]]\n\n## Introduction\n\n![[paper.Introduction]]\n\n## Results\n\n![[paper.Results-and-Discussion]]\n\n## Conclusion\n\n![[paper.Conclusion]]\n\n## Methods\n\n![[Methods|paper.methods]]\n\n## References\n","n":0.378}}},{"i":22,"$":{"0":{"v":"Title","n":1},"1":{"v":"Title page.\n","n":0.707}}},{"i":23,"$":{"0":{"v":"Supplementary","n":1},"1":{"v":"The supplementary.\n","n":0.707}}},{"i":24,"$":{"0":{"v":"Methods","n":1},"1":{"v":"The methods.","n":0.707}}},{"i":25,"$":{"0":{"v":"Results-and-Discussion","n":1},"1":{"v":"Here lies the discussion.\n![[1|paper.results-and-discussion.1]]\n![[2|paper.results-and-discussion.2]]\n![[3|paper.results-and-discussion.3]]\n![[4|paper.results-and-discussion.4]]\n![[5|paper.results-and-discussion.5]]\n![[6|paper.results-and-discussion.6]]\n","n":0.5}}},{"i":26,"$":{"0":{"v":"6","n":1},"1":{"v":"Part 6.\n","n":0.707}}},{"i":27,"$":{"0":{"v":"5","n":1},"1":{"v":"part 5\n","n":0.707}}},{"i":28,"$":{"0":{"v":"4","n":1},"1":{"v":"part 4\n","n":0.707}}},{"i":29,"$":{"0":{"v":"3","n":1},"1":{"v":"part 3\n","n":0.707}}},{"i":30,"$":{"0":{"v":"2","n":1},"1":{"v":"part 2\n","n":0.707}}},{"i":31,"$":{"0":{"v":"1","n":1},"1":{"v":"part 1\n\n#example-plot\n\n<iframe id=\"igraph\" scrolling=\"no\" style=\"border:none;\" seamless=\"seamless\" src=\"https://plotly.com/~chris/1638.embed\" height=\"525\" width=\"100%\"></iframe>\n","n":0.333}}},{"i":32,"$":{"0":{"v":"Introduction","n":1},"1":{"v":"The introduction.\n","n":0.707}}},{"i":33,"$":{"0":{"v":"Conclusion","n":1},"1":{"v":"The conclusion.","n":0.707}}},{"i":34,"$":{"0":{"v":"Abstract","n":1},"1":{"v":"The abstract.\n","n":0.707}}}]}
